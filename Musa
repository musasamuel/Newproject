# 1. Write a program that uses a stack to print the prime factors of a positive integer in descending order

def prime_factors_stack(n):
    stack = []
    factors = []

    # Find prime factors
    for i in range(2, n + 1):
        while n % i == 0:
            stack.append(i)
            n //= i

    # Pop prime factors from stack and store in descending order
    while stack:
        factors.append(stack.pop())

    return factors

# Test case
try:
    number = int(input("Enter a positive integer: "))
    if number <= 0:
        raise ValueError("Please enter a positive integer.")

    result = prime_factors_stack(number)
    print(f"Prime factors of {number} in descending order: {result}")
except ValueError as ve:
    print(ve)

# 2. Write a function to convert a number from base 2 to base 10. To convert a number from base 2 to base 10, we first find the weight of each bit in the binary number. The weight of each bit in the binary number is assigned from right to left. The weight of the rightmost bit is 0. The weight of the bit immediately to the left of the rightmost bit is 1, the weight of the bit immediately to the left of it is 2, and so on. Consider the binary number 1001101. The weight of each bit is as follows:
weight ​​6 5 4 3 2 1 0
1 0 0 1 1 0 1
We use the weight of each bit to find the equivalent decimal number. For each bit, we multiply the bit by 2 to the power of its weight, and then we add all of the numbers. For the binary number 1001101, the equivalent decimal number is

def binary_to_decimal(binary_number):
    decimal_number = 0
    binary_str = str(binary_number)[::-1]  # Reverse the binary string for right-to-left processing

    for i in range(len(binary_str)):
        if binary_str[i] == '1':
            decimal_number += 2**i

    return decimal_number

# Test case
binary_number = "1001101"
decimal_result = binary_to_decimal(binary_number)
print(f"The equivalent decimal number of {binary_number} is {decimal_result}.")


# 3. To write a program that converts a binary number into the equivalent decimal number, we note two things:
- The weight of each bit in the binary number must be known, and
- the weight is assigned from right to left.
Because we do not know in advance how many bits are in the binary number, we must process the bits from right to left. After processing a bit, we can add 1 to its weight, giving the weight of the bit immediately to its left. Also, each bit must be extracted from the binary number and multiplied by 2 to the power of its weight. To extract a bit, you can use the mod operator. Write a program that uses a stack to convert a binary number into an equivalent decimal number and test your function for the following values: 11000101, 10101010, 11111111, 10000000, 1111100000.

def binary_to_decimal(binary_number):
    stack = list(binary_number)
    decimal_number = 0
    weight = 0

    while stack:
        bit = int(stack.pop())
        decimal_number += bit * (2 ** weight)
        weight += 1

    return decimal_number

# Test cases
binary_values = ["11000101", "10101010", "11111111", "10000000", "1111100000"]

for binary_value in binary_values:
    decimal_result = binary_to_decimal(binary_value)
    print(f"The equivalent decimal number of {binary_value} is {decimal_result}.")

# 4. Write a program that uses a stack to convert a decimal number into an equivalent binary number.

def decimal_to_binary(decimal_number):
    stack = []

    while decimal_number > 0:
        remainder = decimal_number % 2
        stack.append(str(remainder))
        decimal_number //= 2

    binary_number = ''.join(reversed(stack))
    return binary_number if binary_number else '0'

# Test cases
decimal_values = [10, 23, 56, 0, 127]

for decimal_value in decimal_values:
    binary_result = decimal_to_binary(decimal_value)
    print(f"The equivalent binary number of {decimal_value} is {binary_result}.")

# 5. Write a program that converts an infix expression into an equivalent postfix expression. The rules to convert an infix expression into an equivalent postfix expression are as follows:
Suppose infx represents the infix expression and pfx represents the postfix expression. The rules to convert infx into pfx are as follows:
a. Initialize pfx to an empty expression and also initialize the stack.
b. Get the next symbol, sym, from infx.
b.1. If sym is an operand, append sym to pfx.
b.2. If sym is (, push sym into the stack.
b.3. If sym is ), pop and append all the symbols from the stack until the most recent left parenthesis. Pop and discard the left parenthesis.
b.4. If sym is an operator:
b.4.1. Pop and append all the operators from the stack to pfx that are above the most recent left parenthesis and have precedence greater than or equal to sym.
b.4.2. Push sym onto the stack.
c. After processing infx, some operators might be left in the stack. Pop and append to pfx everything from the stack.
 
In this program, you will consider the following (binary) arithmetic operators: +, -, *, /. You may assume that the expressions you will process are error free.
 
Design a class that stores the infix and postfix strings. The class must include the following operations:
• getInfix—Stores the infix expression
• showInfix—Outputs the infix expression
• showPostfix—Outputs the postfix expression
Some other operations that you might need are the following:
• convertToPostfix—Converts the infix expression into a postfix expression. The resulting postfix expression is stored in pfx.
• precedence—Determines the precedence between two operators. If the first operator is of higher or equal precedence than the second operator, it returns the value true; otherwise, it returns the value false.
 
Include the constructors and destructors for automatic initialization and dynamic memory deallocation.
 
Test your program on the following five expressions:
A + B - C;
(A + B ) * C;
(A + B) * (C - D);
A + ((B + C) * (E - F) - G) / (H - I);
A + B * (C + D ) - E / F * G + H;
 
For each expression, your answer must be in the following form:
Infix Expression: A + B - C;
Postfix Expression: A B + C -

class InfixToPostfixConverter:
    def __init__(self):
        self.infix = ""
        self.postfix = ""

    def getInfix(self, expression):
        self.infix = expression

    def showInfix(self):
        print("Infix Expression:", self.infix)

    def showPostfix(self):
        print("Postfix Expression:", self.postfix)

    def precedence(self, op1, op2):
        operators = {'+': 1, '-': 1, '*': 2, '/': 2}
        return operators[op1] >= operators[op2]

    def convertToPostfix(self):
        stack = []
        self.postfix = ""

        for sym in self.infix:
            if sym.isalnum():
                self.postfix += sym
            elif sym == '(':
                stack.append(sym)
            elif sym == ')':
                while stack and stack[-1] != '(':
                    self.postfix += stack.pop()
                stack.pop()  # Pop and discard the '('
            elif sym in {'+', '-', '*', '/'}:
                while stack and stack[-1] in {'+', '-', '*', '/'} and self.precedence(stack[-1], sym):
                    self.postfix += stack.pop()
                stack.append(sym)

        while stack:
            self.postfix += stack.pop()

# Test cases
expressions = [
    "A + B - C",
    "(A + B) * C",
    "(A + B) * (C - D)",
    "A + ((B + C) * (E - F) - G) / (H - I)",
    "A + B * (C + D) - E / F * G + H"
]

for expression in expressions:
    converter = InfixToPostfixConverter()
    converter.getInfix(expression)
    converter.convertToPostfix()
    converter.showInfix()
    converter.showPostfix()
    print()

